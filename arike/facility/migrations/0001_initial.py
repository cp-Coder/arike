# Generated by Django 3.2.12 on 2022-03-06 17:50

import arike.facility.models.mixins.permissions.facility
import arike.facility.models.mixins.permissions.patient
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Facility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=255)),
                ('address', models.TextField()),
                ('pincode', models.PositiveIntegerField()),
                ('phone', models.CharField(max_length=14, validators=[django.core.validators.RegexValidator(code='invalid_mobile', message='Please Enter 10/11 digit mobile number or landline as 0<std code><phone number>', regex='^((\\+91|91|0)[\\- ]{0,1})?[456789]\\d{9}$')])),
                ('kind', models.IntegerField(choices=[(1, 'PHC'), (2, 'CHC')], default=1)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, arike.facility.models.mixins.permissions.facility.FacilityPermissionMixin),
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(default=False)),
                ('full_name', models.CharField(max_length=255)),
                ('date_of_birth', models.DateField(null=True)),
                ('address', models.TextField(null=True)),
                ('landmark', models.TextField(null=True)),
                ('phone_number', models.CharField(max_length=14, validators=[django.core.validators.RegexValidator(code='invalid_mobile', message='Please Enter 10/11 digit mobile number or landline as 0<std code><phone number>', regex='^((\\+91|91|0)[\\- ]{0,1})?[456789]\\d{9}$')])),
                ('gender', models.IntegerField(choices=[(1, 'Male'), (2, 'Female'), (3, 'Non-binary')])),
                ('emergency_phone_number', models.CharField(max_length=14, validators=[django.core.validators.RegexValidator(code='invalid_mobile', message='Please Enter 10/11 digit mobile number or landline as 0<std code><phone number>', regex='^((\\+91|91|0)[\\- ]{0,1})?[456789]\\d{9}$')])),
                ('expired_time', models.TimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='patient_created_by', to=settings.AUTH_USER_MODEL)),
                ('facility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='facility.facility')),
                ('ward', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='users.ward')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, arike.facility.models.mixins.permissions.patient.PatientPermissionMixin),
        ),
        migrations.CreateModel(
            name='Treatment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(default=False)),
                ('care_type', models.IntegerField(choices=[(1, 'General care'), (2, 'Genito urinary care'), (3, 'Gastro-intestinal care'), (4, 'Wound care'), (5, 'Respiratory care'), (6, 'Invasive care'), (7, 'Physiotherapy')], default=0)),
                ('care_sub_type', models.IntegerField(choices=[(1, 'Mouth care'), (2, 'Bath'), (3, 'Nail cutting'), (4, 'Shaving'), (5, 'Perennial care'), (6, 'Condom catheterisation & training'), (7, 'Nelcath catheterisation & training'), (8, "Foley's catheterisation"), (9, "Foley's catheter care"), (10, 'Suprapubic catheterisation'), (11, 'Suprapubic catheter care'), (12, 'Bladder wash with normal saline'), (13, 'Bladder wash with soda bicarbonate'), (14, 'Urostomy care'), (15, 'Ryles tube insertion'), (16, 'Ryles tube care'), (17, 'Ryles tube feeding & training'), (18, 'PEG care'), (19, 'Per Rectal Enema'), (20, 'High enema'), (21, 'Bisacodyl Suppository'), (22, 'Digital evacuation'), (23, 'Colostomy care'), (24, 'Colostomy irrigation care'), (25, 'ileostomy care'), (26, 'Wound care training given to family'), (27, 'Wound dressing'), (28, 'Suture removal'), (29, 'Vacuum dressing'), (30, 'Tracheostomy care'), (31, 'Chest physiotherapy'), (32, 'Inhaler training'), (33, 'Oxygen concentrator - training'), (34, 'Bi-PAP training'), (35, 'Bandaging'), (36, 'Upper limb lymphedema bandaging'), (37, 'Lower limb lymphedema bandaging'), (38, 'Upper limb lymphedema hosiery'), (39, 'PVOD bandaging'), (40, 'IV fluid infusion'), (41, 'IV medicine bolus administration'), (42, 'IV cannula care'), (43, 'IV cannula insertion'), (44, 'S/C cannula insertion'), (45, 'S/C fluid infusion (subcutaneous)'), (46, 'S/C medicine bolus administration'), (47, 'S/C cannula care'), (48, 'Ascites tapping'), (49, 'Ascitic catheter care'), (50, 'Passive Movement'), (51, 'Active Movement'), (52, 'Strengthening exercises'), (53, 'NDT'), (54, 'GAIT Training'), (55, 'Modalities + text field'), (56, 'Breathing exercises'), (57, 'Balance & Coordination exercises'), (58, 'Stretching'), (59, 'Postural correction')])),
                ('description', models.TextField(null=True)),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='facility.patient')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VisitSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(default=False)),
                ('time', models.DateTimeField(null=True)),
                ('duration', models.CharField(max_length=5, null=True)),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='facility.patient')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VisitDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(default=False)),
                ('palliative_phase', models.CharField(choices=[('Stable', 'Stable'), ('Unstable', 'Unstable'), ('Deteriorating', 'Deteriorating'), ('Dying', 'Dying')], default='Stable', max_length=50)),
                ('blood_pressure', models.CharField(max_length=50, null=True)),
                ('pulse', models.CharField(max_length=50, null=True)),
                ('general_random_blood_sugar', models.CharField(max_length=50, null=True)),
                ('personal_hygiene', models.TextField(null=True)),
                ('mouth_hygiene', models.TextField(null=True)),
                ('pubic_hygiene', models.TextField(null=True)),
                ('systemic_examination', models.IntegerField(choices=[(1, 'Cardiovascular'), (2, 'Gastrointestinal'), (3, 'Central Nervous System'), (4, 'Respiratory'), (5, 'Genital-urinary')], default=0)),
                ('patient_at_peace', models.BooleanField(null=True)),
                ('pain', models.BooleanField(null=True)),
                ('symptoms', models.TextField(null=True)),
                ('visit_schedule', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='facility.visitschedule')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TreatmentNotes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(default=False)),
                ('notes', models.TextField(null=True)),
                ('description', models.TextField(null=True)),
                ('treatment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='facility.treatment')),
                ('visit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='facility.visitdetails')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PatientDisease',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(default=False)),
                ('disease', models.CharField(choices=[('DM', 'D-32'), ('Hypertension', 'HT-58'), ('IHD', 'IDH-21'), ('COPD', 'DPOC-144'), ('Dementia', 'DM-62'), ('CVA', 'CAV-89'), ('Cancer', 'C-98'), ('CKD', 'DC-25')], max_length=100)),
                ('note', models.TextField(null=True)),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='facility.patient')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FamilyDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(default=False)),
                ('full_name', models.CharField(max_length=255)),
                ('phone_number', models.CharField(max_length=14, validators=[django.core.validators.RegexValidator(code='invalid_mobile', message='Please Enter 10/11 digit mobile number or landline as 0<std code><phone number>', regex='^((\\+91|91|0)[\\- ]{0,1})?[456789]\\d{9}$')])),
                ('date_of_birth', models.DateField(null=True)),
                ('email', models.EmailField(max_length=254, null=True)),
                ('relation', models.IntegerField(choices=[(1, 'FAMILY_MEMBER'), (2, 'FRIEND'), (3, 'RELATIVE'), (4, 'NEIGHBOR'), (5, 'TRAVEL_TOGETHER'), (6, 'WHILE_AT_HOSPITAL'), (7, 'WHILE_AT_SHOP'), (8, 'WHILE_AT_OFFICE_OR_ESTABLISHMENT'), (9, 'WORSHIP_PLACE'), (10, 'OTHERS')], default=1)),
                ('address', models.TextField(null=True)),
                ('education', models.TextField(null=True)),
                ('occupation', models.TextField(null=True)),
                ('remarks', models.TextField(null=True)),
                ('is_primary', models.BooleanField(null=True)),
                ('expired_time', models.TimeField(blank=True, null=True)),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='facility.patient')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FacilityUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_users', to=settings.AUTH_USER_MODEL)),
                ('facility', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='facility.facility')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='facility',
            name='users',
            field=models.ManyToManyField(related_name='facilities', through='facility.FacilityUser', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='facility',
            name='ward',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='users.ward'),
        ),
    ]
